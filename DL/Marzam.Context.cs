//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class MarzanEntities : DbContext
    {
        public MarzanEntities()
            : base("name=MarzanEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Mediamento> Mediamentoes { get; set; }
        public virtual DbSet<Pedido> Pedidos { get; set; }
        public virtual DbSet<Usuario> Usuarios { get; set; }
    
        public virtual int PedidoAdd(Nullable<int> idUsuario, Nullable<int> idMedicamento, Nullable<int> cantidad, Nullable<decimal> total)
        {
            var idUsuarioParameter = idUsuario.HasValue ?
                new ObjectParameter("IdUsuario", idUsuario) :
                new ObjectParameter("IdUsuario", typeof(int));
    
            var idMedicamentoParameter = idMedicamento.HasValue ?
                new ObjectParameter("IdMedicamento", idMedicamento) :
                new ObjectParameter("IdMedicamento", typeof(int));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("Cantidad", cantidad) :
                new ObjectParameter("Cantidad", typeof(int));
    
            var totalParameter = total.HasValue ?
                new ObjectParameter("Total", total) :
                new ObjectParameter("Total", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PedidoAdd", idUsuarioParameter, idMedicamentoParameter, cantidadParameter, totalParameter);
        }
    
        public virtual int PedidoDelete(Nullable<int> idPedido)
        {
            var idPedidoParameter = idPedido.HasValue ?
                new ObjectParameter("IdPedido", idPedido) :
                new ObjectParameter("IdPedido", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PedidoDelete", idPedidoParameter);
        }
    
        public virtual int PedidoUpdate(Nullable<int> idPedido, Nullable<int> idUsuario, Nullable<int> idMedicamento, Nullable<int> cantidad, Nullable<decimal> total)
        {
            var idPedidoParameter = idPedido.HasValue ?
                new ObjectParameter("IdPedido", idPedido) :
                new ObjectParameter("IdPedido", typeof(int));
    
            var idUsuarioParameter = idUsuario.HasValue ?
                new ObjectParameter("IdUsuario", idUsuario) :
                new ObjectParameter("IdUsuario", typeof(int));
    
            var idMedicamentoParameter = idMedicamento.HasValue ?
                new ObjectParameter("IdMedicamento", idMedicamento) :
                new ObjectParameter("IdMedicamento", typeof(int));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("Cantidad", cantidad) :
                new ObjectParameter("Cantidad", typeof(int));
    
            var totalParameter = total.HasValue ?
                new ObjectParameter("Total", total) :
                new ObjectParameter("Total", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PedidoUpdate", idPedidoParameter, idUsuarioParameter, idMedicamentoParameter, cantidadParameter, totalParameter);
        }
    
        public virtual ObjectResult<PedidosGetAll_Result> PedidosGetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PedidosGetAll_Result>("PedidosGetAll");
        }
    
        public virtual ObjectResult<PedidosGetById_Result> PedidosGetById(Nullable<int> idPedido)
        {
            var idPedidoParameter = idPedido.HasValue ?
                new ObjectParameter("IdPedido", idPedido) :
                new ObjectParameter("IdPedido", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PedidosGetById_Result>("PedidosGetById", idPedidoParameter);
        }
    
        public virtual ObjectResult<MedicamentosGetAll_Result> MedicamentosGetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MedicamentosGetAll_Result>("MedicamentosGetAll");
        }
    
        public virtual ObjectResult<GetUserName_Result> GetUserName(string userName, string password)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUserName_Result>("GetUserName", userNameParameter, passwordParameter);
        }
    }
}
